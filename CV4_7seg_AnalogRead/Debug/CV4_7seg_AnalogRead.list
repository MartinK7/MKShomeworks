
CV4_7seg_AnalogRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012b4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001494  08001494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001494  08001494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001494  08001494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001498  08001498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800149c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000004  080014a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080014a0  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001753  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004db  00000000  00000000  00021787  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  00021c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  00021d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a38c  00000000  00000000  00021e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000010d5  00000000  00000000  0003c1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093718  00000000  00000000  0003d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d09c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000044c  00000000  00000000  000d0a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000004 	.word	0x20000004
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800144c 	.word	0x0800144c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000008 	.word	0x20000008
 80001ec:	0800144c 	.word	0x0800144c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f7ff ffc2 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <SysTick_Handler>:
 */

volatile uint32_t S1 = 0, S2 = 0;
volatile uint32_t delay_ms_cnt = 0;

void SysTick_Handler() {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	if(S1 > 0)S1--;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <SysTick_Handler+0x44>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <SysTick_Handler+0x16>
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <SysTick_Handler+0x44>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <SysTick_Handler+0x44>)
 8000b14:	6013      	str	r3, [r2, #0]
	if(S2 > 0)S2--;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <SysTick_Handler+0x48>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <SysTick_Handler+0x28>
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <SysTick_Handler+0x48>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <SysTick_Handler+0x48>)
 8000b26:	6013      	str	r3, [r2, #0]
	if(delay_ms_cnt > 0)delay_ms_cnt--;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SysTick_Handler+0x4c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <SysTick_Handler+0x3a>
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SysTick_Handler+0x4c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SysTick_Handler+0x4c>)
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	20000020 	.word	0x20000020
 8000b48:	20000024 	.word	0x20000024
 8000b4c:	20000028 	.word	0x20000028

08000b50 <delay_ms>:

void delay_ms(uint32_t time_ms) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	delay_ms_cnt = time_ms;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <delay_ms+0x24>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
	while(delay_ms_cnt);
 8000b5e:	bf00      	nop
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <delay_ms+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1fb      	bne.n	8000b60 <delay_ms+0x10>
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000028 	.word	0x20000028

08000b78 <show>:

#define MAX7219_DECIMAL_POINT 0x800000
void show(uint32_t value, uint32_t decimalPoint) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	value %= 10000;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <show+0xb8>)
 8000b86:	fba2 1203 	umull	r1, r2, r2, r3
 8000b8a:	0b52      	lsrs	r2, r2, #13
 8000b8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b90:	fb01 f202 	mul.w	r2, r1, r2
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
	uint32_t a = value / 1000;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <show+0xbc>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	099b      	lsrs	r3, r3, #6
 8000ba2:	617b      	str	r3, [r7, #20]
	value -= a * 1000;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	607b      	str	r3, [r7, #4]
	uint32_t b = value / 100;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <show+0xc0>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	613b      	str	r3, [r7, #16]
	value -= b * 100;
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	607b      	str	r3, [r7, #4]
	uint32_t c = value / 10;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <show+0xc4>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	60fb      	str	r3, [r7, #12]
	value -= c * 10;
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	607b      	str	r3, [r7, #4]
	uint32_t d = value;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60bb      	str	r3, [r7, #8]

	max7219_led(
			(max7219_customRegValues[a] << 24 |
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <show+0xc8>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	061a      	lsls	r2, r3, #24
			max7219_customRegValues[b] << 16 |
 8000bfa:	4911      	ldr	r1, [pc, #68]	; (8000c40 <show+0xc8>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	440b      	add	r3, r1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	041b      	lsls	r3, r3, #16
			(max7219_customRegValues[a] << 24 |
 8000c04:	431a      	orrs	r2, r3
			max7219_customRegValues[c] << 8 |
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <show+0xc8>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	440b      	add	r3, r1
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	021b      	lsls	r3, r3, #8
			max7219_customRegValues[b] << 16 |
 8000c10:	4313      	orrs	r3, r2
			max7219_customRegValues[d]) | decimalPoint);
 8000c12:	490b      	ldr	r1, [pc, #44]	; (8000c40 <show+0xc8>)
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	440a      	add	r2, r1
 8000c18:	7812      	ldrb	r2, [r2, #0]
			max7219_customRegValues[c] << 8 |
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	461a      	mov	r2, r3
	max7219_led(
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 faea 	bl	80011fc <max7219_led>
}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	d1b71759 	.word	0xd1b71759
 8000c34:	10624dd3 	.word	0x10624dd3
 8000c38:	51eb851f 	.word	0x51eb851f
 8000c3c:	cccccccd 	.word	0xcccccccd
 8000c40:	08001464 	.word	0x08001464

08000c44 <button_init>:

void button_init() {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	// Enable clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <button_init+0x58>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <button_init+0x58>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30

//	GPIOE->AFR[0]  &= ~(0x0FU << (5-0)*4 | 0x0FU << (3-0)*4); // No alternate
//	GPIOE->AFR[0]  |=  (0x00U << (5-0)*4 | 0x00U << (3-0)*4); //
	GPIOE->MODER   &= ~(0x03U <<  5*2 | 0x03U << 3*2); // Input mode
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <button_init+0x5c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <button_init+0x5c>)
 8000c5a:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 8000c5e:	6013      	str	r3, [r2, #0]
//	GPIOE->MODER   |=  (0x00U <<  5*2 | 0x00U << 3*2); //
	GPIOE->OSPEEDR &=  (0x03U <<  5*2 | 0x03U << 3*2); // Low speed
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <button_init+0x5c>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <button_init+0x5c>)
 8000c66:	f403 634c 	and.w	r3, r3, #3264	; 0xcc0
 8000c6a:	6093      	str	r3, [r2, #8]
//	GPIOE->OSPEEDR |=  (0x00U <<  5*2 | 0x00U << 3*2); //
	GPIOE->OTYPER  &= ~(0x01U <<  5*1 | 0x01U << 3*1); // Output push-pull (reset state)
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <button_init+0x5c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <button_init+0x5c>)
 8000c72:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c76:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR   &= ~(0x03U <<  5*2 | 0x03U << 3*2); // Pull-ups
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <button_init+0x5c>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <button_init+0x5c>)
 8000c7e:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 8000c82:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR   |=  (0x01U <<  5*2 | 0x01U << 3*2); //
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <button_init+0x5c>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <button_init+0x5c>)
 8000c8a:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <ADC_IRQHandler>:

volatile uint16_t raw_trimr;
volatile uint16_t raw_temp;
volatile uint16_t raw_volt;

void ADC_IRQHandler(void) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	if(ADC1->SR & ADC_SR_EOC) {
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <ADC_IRQHandler+0x7c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d030      	beq.n	8000d16 <ADC_IRQHandler+0x72>
		static uint32_t i = 0;

		switch(i) {
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d00e      	beq.n	8000cda <ADC_IRQHandler+0x36>
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d302      	bcc.n	8000cc6 <ADC_IRQHandler+0x22>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d014      	beq.n	8000cee <ADC_IRQHandler+0x4a>
 8000cc4:	e01b      	b.n	8000cfe <ADC_IRQHandler+0x5a>
			case 0:
				raw_trimr = *(uint16_t*)&ADC1->DR;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <ADC_IRQHandler+0x84>)
 8000cc8:	881a      	ldrh	r2, [r3, #0]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <ADC_IRQHandler+0x88>)
 8000ccc:	801a      	strh	r2, [r3, #0]
				i++;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000cd6:	6013      	str	r3, [r2, #0]
				break;
 8000cd8:	e011      	b.n	8000cfe <ADC_IRQHandler+0x5a>
			case 1:
				raw_temp = *(uint16_t*)&ADC1->DR;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <ADC_IRQHandler+0x84>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <ADC_IRQHandler+0x8c>)
 8000ce0:	801a      	strh	r2, [r3, #0]
				i++;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000cea:	6013      	str	r3, [r2, #0]
				break;
 8000cec:	e007      	b.n	8000cfe <ADC_IRQHandler+0x5a>
			case 2:
				raw_volt = *(uint16_t*)&ADC1->DR;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <ADC_IRQHandler+0x84>)
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <ADC_IRQHandler+0x90>)
 8000cf4:	801a      	strh	r2, [r3, #0]
				i = 0;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <ADC_IRQHandler+0x80>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
				break;
 8000cfc:	bf00      	nop
		}

		ADC1->SR &= ~ADC_SR_EOC; //clear flag
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <ADC_IRQHandler+0x7c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <ADC_IRQHandler+0x7c>)
 8000d04:	f023 0302 	bic.w	r3, r3, #2
 8000d08:	6013      	str	r3, [r2, #0]
		ADC1->SR &= ~ADC_SR_OVR; //clear flag
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <ADC_IRQHandler+0x7c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <ADC_IRQHandler+0x7c>)
 8000d10:	f023 0320 	bic.w	r3, r3, #32
 8000d14:	6013      	str	r3, [r2, #0]
	}
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40012000 	.word	0x40012000
 8000d24:	2000002c 	.word	0x2000002c
 8000d28:	4001204c 	.word	0x4001204c
 8000d2c:	2000004e 	.word	0x2000004e
 8000d30:	20000050 	.word	0x20000050
 8000d34:	2000004c 	.word	0x2000004c

08000d38 <analog_init>:

void analog_init() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	// Enable clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <analog_init+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a3a      	ldr	r2, [pc, #232]	; (8000e2c <analog_init+0xf4>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <analog_init+0xf4>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	4a37      	ldr	r2, [pc, #220]	; (8000e2c <analog_init+0xf4>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6453      	str	r3, [r2, #68]	; 0x44

//	GPIOC->AFR[0]  &= ~(0x0FU << (3-0)*4); // No alternate
//	GPIOC->AFR[0]  |=  (0x00U << (3-0)*4); //
//	GPIOC->MODER   &= ~(0x03U <<  3*2); // Analog mode
	GPIOC->MODER   |=  (0x03U <<  3*2); //
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <analog_init+0xf8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <analog_init+0xf8>)
 8000d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d5e:	6013      	str	r3, [r2, #0]
//	GPIOC->OSPEEDR &=  (0x03U <<  3*2); // Low speed
//	GPIOC->OSPEEDR |=  (0x00U <<  3*2); //
//	GPIOC->OTYPER  &= ~(0x01U <<  3*1); // Output push-pull (reset state)
	GPIOC->PUPDR   &= ~(0x03U <<  3*2); // No - Pull-ups
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <analog_init+0xf8>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <analog_init+0xf8>)
 8000d66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d6a:	60d3      	str	r3, [r2, #12]
//	GPIOC->PUPDR   |=  (0x01U <<  3*2); //

	ADC1->CR1  &= ~ADC_CR1_RES;                 // ADC1 resolution 12 bit
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <analog_init+0xfc>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <analog_init+0xfc>)
 8000d72:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d76:	6053      	str	r3, [r2, #4]
	ADC1->CR1  |= ADC_CR1_SCAN | ADC_CR1_EOCIE;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <analog_init+0xfc>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <analog_init+0xfc>)
 8000d7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8000d82:	6053      	str	r3, [r2, #4]

	ADC1->CR2   |= ADC_CR2_CONT | ADC_CR2_EOCS; // Continuous conversion
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <analog_init+0xfc>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a2a      	ldr	r2, [pc, #168]	; (8000e34 <analog_init+0xfc>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	6093      	str	r3, [r2, #8]

	ADC1->SQR1 &= ~ADC_SQR1_L;              // 3 channel sequence length
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <analog_init+0xfc>)
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <analog_init+0xfc>)
 8000d9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= (3-1) << ADC_SQR1_L_Pos;  //
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <analog_init+0xfc>)
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <analog_init+0xfc>)
 8000da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000daa:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 |= (13 << ADC_SQR3_SQ1_Pos); // Channel 13
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <analog_init+0xfc>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <analog_init+0xfc>)
 8000db2:	f043 030d 	orr.w	r3, r3, #13
 8000db6:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (16 << ADC_SQR3_SQ2_Pos); // Temp. sensor
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <analog_init+0xfc>)
 8000dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <analog_init+0xfc>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc2:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (17 << ADC_SQR3_SQ3_Pos); // Vrefint
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <analog_init+0xfc>)
 8000dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <analog_init+0xfc>)
 8000dca:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000dce:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SMPR1 |= 7 << ADC_SMPR1_SMP13_Pos; // channel 13 sample 84 cycles
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <analog_init+0xfc>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <analog_init+0xfc>)
 8000dd6:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000dda:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR1 |= 7 << ADC_SMPR1_SMP16_Pos; // channel 16 sample 480 cycles
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <analog_init+0xfc>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <analog_init+0xfc>)
 8000de2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000de6:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR1 |= 7 << ADC_SMPR1_SMP17_Pos; // channel 17 sample 480 cycles
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <analog_init+0xfc>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <analog_init+0xfc>)
 8000dee:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8000df2:	60d3      	str	r3, [r2, #12]
	ADC123_COMMON->CCR |= ADC_CCR_TSVREFE; // Enable read internal temp and voltage
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <analog_init+0x100>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <analog_init+0x100>)
 8000dfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dfe:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= ADC_CR2_ADON; //ADC on
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <analog_init+0xfc>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <analog_init+0xfc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART; //start conversion
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <analog_init+0xfc>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <analog_init+0xfc>)
 8000e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e16:	6093      	str	r3, [r2, #8]

	NVIC_SetPriority(ADC_IRQn, 4);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f7ff fe24 	bl	8000a68 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC_IRQn); //IRQ handler
 8000e20:	2012      	movs	r0, #18
 8000e22:	f7ff fe03 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40012000 	.word	0x40012000
 8000e38:	40012300 	.word	0x40012300

08000e3c <filter>:
	while(!(ADC1->SR & ADC_SR_EOC)); //wait
	return ADC1->DR;
}

#define OLD_VALUES_COUNT 6 // I need more then 1 old values
uint32_t filter(uint32_t input) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	static uint32_t last_values[OLD_VALUES_COUNT] = {0};

	// shift data
	for(uint32_t i=0; i<OLD_VALUES_COUNT-1; ++i) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e00b      	b.n	8000e62 <filter+0x26>
		last_values[i] = last_values[i+1];
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <filter+0x6c>)
 8000e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e54:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <filter+0x6c>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i=0; i<OLD_VALUES_COUNT-1; ++i) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d9f0      	bls.n	8000e4a <filter+0xe>
	}

	// load new value
	last_values[OLD_VALUES_COUNT-1] = input;
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <filter+0x6c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6153      	str	r3, [r2, #20]

	// Calculate summary
	uint32_t sum = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<OLD_VALUES_COUNT; ++i) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	e009      	b.n	8000e8c <filter+0x50>
		sum += last_values[i];
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <filter+0x6c>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4413      	add	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<OLD_VALUES_COUNT; ++i) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d9f2      	bls.n	8000e78 <filter+0x3c>
	}

	return sum / OLD_VALUES_COUNT;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <filter+0x70>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	089b      	lsrs	r3, r3, #2
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20000030 	.word	0x20000030
 8000eac:	aaaaaaab 	.word	0xaaaaaaab

08000eb0 <getVrefVoltage>:


/* Internal voltage reference calibration value address */
#define VREFINT_CAL_ADDR ((uint16_t*) ((uint32_t) 0x1FFF7A2A))
uint32_t getVrefVoltage() {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <getVrefVoltage+0x30>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8000ec0:	fb03 f302 	mul.w	r3, r3, r2
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <getVrefVoltage+0x34>)
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ece:	607b      	str	r3, [r7, #4]
	return voltage;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	1fff7a2a 	.word	0x1fff7a2a
 8000ee4:	2000004c 	.word	0x2000004c

08000ee8 <getCoreTemperature>:

/* Temperature sensor calibration value address */
#define TEMP110_CAL_ADDR ((uint16_t*) ((uint32_t) 0x1FFF7A2C))
#define TEMP30_CAL_ADDR ((uint16_t*) ((uint32_t) 0x1FFF7A2E))
int32_t getCoreTemperature() {
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	ed2d 8b02 	vpush	{d8}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
		int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
		temperature = temperature * (int32_t)(110 - 30);
		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
		temperature = temperature + 25;
	*/
	float temperature = (float)raw_temp/4095.0f*((float)getVrefVoltage(raw_volt)/100.0f);
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <getCoreTemperature+0xb0>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000f9c <getCoreTemperature+0xb4>
 8000f04:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <getCoreTemperature+0xb8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffce 	bl	8000eb0 <getVrefVoltage>
 8000f14:	ee07 0a90 	vmov	s15, r0
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000fa4 <getCoreTemperature+0xbc>
 8000f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000f28:	edc7 7a01 	vstr	s15, [r7, #4]
	temperature -= 0.75f;
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f38:	edc7 7a01 	vstr	s15, [r7, #4]
	temperature /= 0.0025;
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fabb 	bl	80004b8 <__aeabi_f2d>
 8000f42:	a313      	add	r3, pc, #76	; (adr r3, 8000f90 <getCoreTemperature+0xa8>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fc38 	bl	80007bc <__aeabi_ddiv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4618      	mov	r0, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	f7ff fd1a 	bl	800098c <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	607b      	str	r3, [r7, #4]
	temperature += 25;
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f68:	edc7 7a01 	vstr	s15, [r7, #4]

	return temperature * 100.0f;
 8000f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000fa4 <getCoreTemperature+0xbc>
 8000f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7c:	ee17 3a90 	vmov	r3, s15
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	ecbd 8b02 	vpop	{d8}
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	f3af 8000 	nop.w
 8000f90:	47ae147b 	.word	0x47ae147b
 8000f94:	3f647ae1 	.word	0x3f647ae1
 8000f98:	20000050 	.word	0x20000050
 8000f9c:	457ff000 	.word	0x457ff000
 8000fa0:	2000004c 	.word	0x2000004c
 8000fa4:	42c80000 	.word	0x42c80000

08000fa8 <main>:

int main() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	SystemInit();
 8000fac:	f000 f970 	bl	8001290 <SystemInit>
	SystemCoreClockUpdate();
 8000fb0:	f000 f984 	bl	80012bc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000); //1ms
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <main+0x108>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a3e      	ldr	r2, [pc, #248]	; (80010b4 <main+0x10c>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	099b      	lsrs	r3, r3, #6
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd7b 	bl	8000abc <SysTick_Config>

	max7219_init(); // Init, do not use internal decode table
 8000fc6:	f000 f885 	bl	80010d4 <max7219_init>
	analog_init();
 8000fca:	f7ff feb5 	bl	8000d38 <analog_init>
	button_init();
 8000fce:	f7ff fe39 	bl	8000c44 <button_init>
	while(1) {

		if(!(GPIOE->IDR & GPIO_IDR_ID3) || S1>5) {
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <main+0x110>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <main+0x3e>
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <main+0x114>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b05      	cmp	r3, #5
 8000fe4:	d914      	bls.n	8001010 <main+0x68>
			show( filter(getCoreTemperature()) , MAX7219_DECIMAL_POINT);
 8000fe6:	f7ff ff7f 	bl	8000ee8 <getCoreTemperature>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff25 	bl	8000e3c <filter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fdbd 	bl	8000b78 <show>
			if(!S1)S1 = 3000;
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <main+0x114>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d12e      	bne.n	8001064 <main+0xbc>
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <main+0x114>)
 8001008:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e029      	b.n	8001064 <main+0xbc>
		} else if(!(GPIOE->IDR & GPIO_IDR_ID5) || S2>5) {
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <main+0x110>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <main+0x7c>
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <main+0x118>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d914      	bls.n	800104e <main+0xa6>
			show( filter(getVrefVoltage()) , MAX7219_DECIMAL_POINT);
 8001024:	f7ff ff44 	bl	8000eb0 <getVrefVoltage>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff06 	bl	8000e3c <filter>
 8001030:	4603      	mov	r3, r0
 8001032:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd9e 	bl	8000b78 <show>
			if(!S2)S2 = 3000;
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <main+0x118>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <main+0xbc>
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <main+0x118>)
 8001046:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e00a      	b.n	8001064 <main+0xbc>
		} else {
			// Print analog value (I have more then 3 digits, so lets print all of them)
			show(filter(raw_trimr), 0);
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <main+0x11c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fef1 	bl	8000e3c <filter>
 800105a:	4603      	mov	r3, r0
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd8a 	bl	8000b78 <show>
		}

		// BarGraph
		static int32_t bar = 0;
		// Recalculate
		bar = raw_trimr / 511;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <main+0x11c>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <main+0x120>)
 800106c:	fba3 1302 	umull	r1, r3, r3, r2
 8001070:	1ad2      	subs	r2, r2, r3
 8001072:	0852      	lsrs	r2, r2, #1
 8001074:	4413      	add	r3, r2
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <main+0x124>)
 800107e:	601a      	str	r2, [r3, #0]
		// Clamp
		bar = bar > 8 ? 8 : bar;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <main+0x124>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b08      	cmp	r3, #8
 8001086:	bfa8      	it	ge
 8001088:	2308      	movge	r3, #8
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <main+0x124>)
 800108c:	6013      	str	r3, [r2, #0]
		bar = bar < 0 ? 0 : bar;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <main+0x124>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <main+0x124>)
 8001098:	6013      	str	r3, [r2, #0]
		// Show
		max7219_barGraph(max7219_barGraphRegValues[bar]);
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <main+0x124>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <main+0x128>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f8de 	bl	8001264 <max7219_barGraph>

		delay_ms(25);
 80010a8:	2019      	movs	r0, #25
 80010aa:	f7ff fd51 	bl	8000b50 <delay_ms>
	while(1) {
 80010ae:	e790      	b.n	8000fd2 <main+0x2a>
 80010b0:	20000000 	.word	0x20000000
 80010b4:	10624dd3 	.word	0x10624dd3
 80010b8:	40021000 	.word	0x40021000
 80010bc:	20000020 	.word	0x20000020
 80010c0:	20000024 	.word	0x20000024
 80010c4:	2000004e 	.word	0x2000004e
 80010c8:	00804021 	.word	0x00804021
 80010cc:	20000048 	.word	0x20000048
 80010d0:	08001474 	.word	0x08001474

080010d4 <max7219_init>:

const uint8_t max7219_barGraphRegValues[16] = {
	0, 1, 3, 7, 15, 31, 63, 127, 255
};

void max7219_init() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	// Enable clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <max7219_init+0xe8>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a37      	ldr	r2, [pc, #220]	; (80011bc <max7219_init+0xe8>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <max7219_init+0xe8>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4a34      	ldr	r2, [pc, #208]	; (80011bc <max7219_init+0xe8>)
 80010ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ee:	6453      	str	r3, [r2, #68]	; 0x44

	// SPI4 - 7seg LED driver MAX7219
	// PE2 - SCK
	// PE4 - NSS
	// PE6 - MOSI
	GPIOE->AFR[0]  &= ~(0x0FU << (2-0)*4 | 0x0FU << (4-0)*4 | 0x0FU << (6-0)*4); // Alternate - SPI4
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <max7219_init+0xec>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <max7219_init+0xec>)
 80010f6:	f023 230f 	bic.w	r3, r3, #251662080	; 0xf000f00
 80010fa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80010fe:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0]  |=  (0x05U << (2-0)*4 | 0x05U << (4-0)*4 | 0x05U << (6-0)*4); //
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <max7219_init+0xec>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <max7219_init+0xec>)
 8001106:	f043 2305 	orr.w	r3, r3, #83887360	; 0x5000500
 800110a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800110e:	6213      	str	r3, [r2, #32]
	GPIOE->MODER   &= ~(0x03U <<  2*2 | 0x03U << 4*2 | 0x03U << 6*2); // Alternate mode
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <max7219_init+0xec>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <max7219_init+0xec>)
 8001116:	f423 534c 	bic.w	r3, r3, #13056	; 0x3300
 800111a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800111e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (0x02U <<  2*2 | 0x02U << 4*2 | 0x02U << 6*2); //
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <max7219_init+0xec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <max7219_init+0xec>)
 8001126:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR &=  (0x03U <<  2*2 | 0x03U << 4*2 | 0x03U << 6*2); // High speed
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <max7219_init+0xec>)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <max7219_init+0xec>)
 8001136:	f243 3330 	movw	r3, #13104	; 0x3330
 800113a:	4013      	ands	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
	GPIOE->OSPEEDR |=  (0x02U <<  2*2 | 0x02U << 4*2 | 0x02U << 6*2); //
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <max7219_init+0xec>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <max7219_init+0xec>)
 8001144:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6093      	str	r3, [r2, #8]
	GPIOE->OTYPER  &= ~(0x01U <<  2*1 | 0x01U << 4*1 | 0x01U << 6*1); // Output push-pull (reset state)
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <max7219_init+0xec>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <max7219_init+0xec>)
 8001154:	f023 0354 	bic.w	r3, r3, #84	; 0x54
 8001158:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR   &= ~(0x03U <<  2*2 | 0x03U << 4*2 | 0x03U << 6*2); // No pull-ups
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <max7219_init+0xec>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <max7219_init+0xec>)
 8001160:	f423 534c 	bic.w	r3, r3, #13056	; 0x3300
 8001164:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001168:	60d3      	str	r3, [r2, #12]

	// Init SPI
	SPI4->CR1  = SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE | SPI_CR1_DFF | SPI_CR1_MSTR; // 1-wire, TX-only, 16bit, MSBfirst, master
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <max7219_init+0xf0>)
 800116c:	f64c 0204 	movw	r2, #51204	; 0xc804
 8001170:	601a      	str	r2, [r3, #0]
	SPI4->CR1 |= 0b001 << SPI_CR1_BR_Pos;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <max7219_init+0xf0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <max7219_init+0xf0>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6013      	str	r3, [r2, #0]
	SPI4->CR2 = SPI_CR2_FRF;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <max7219_init+0xf0>)
 8001180:	2210      	movs	r2, #16
 8001182:	605a      	str	r2, [r3, #4]
	SPI4->CR1 |= SPI_CR1_SPE; // Enable SPI
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <max7219_init+0xf0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <max7219_init+0xf0>)
 800118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118e:	6013      	str	r3, [r2, #0]

	// Init MAX7219
	max7219_cmd(0x0F00); // Turn off segments test
 8001190:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001194:	f000 f818 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0900); // No use of decode table
 8001198:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800119c:	f000 f814 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0A0F); // Maximum bright
 80011a0:	f640 200f 	movw	r0, #2575	; 0xa0f
 80011a4:	f000 f810 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0B04); // Scan line 4 digits + 1 bar graph
 80011a8:	f640 3004 	movw	r0, #2820	; 0xb04
 80011ac:	f000 f80c 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0C01); // Normal OP
 80011b0:	f640 4001 	movw	r0, #3073	; 0xc01
 80011b4:	f000 f808 	bl	80011c8 <max7219_cmd>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40013400 	.word	0x40013400

080011c8 <max7219_cmd>:

extern void delay_ms(uint32_t time_ms);
void max7219_cmd(uint16_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	// TX value over SPI
	*(uint16_t*)&SPI4->DR = value;
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <max7219_cmd+0x2c>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8013      	strh	r3, [r2, #0]
	// Wait for transfer
	while(!(SPI4->SR & SPI_SR_TXE));
 80011d8:	bf00      	nop
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <max7219_cmd+0x30>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f9      	beq.n	80011da <max7219_cmd+0x12>
	// Delay
	delay_ms(3);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f7ff fcb2 	bl	8000b50 <delay_ms>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	4001340c 	.word	0x4001340c
 80011f8:	40013400 	.word	0x40013400

080011fc <max7219_led>:

void max7219_led(uint32_t leds) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	max7219_cmd(0x0400 | ((leds & 0x000000FF) >> 0));	// Most right digit
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b29b      	uxth	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001210:	b29b      	uxth	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffd8 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0300 | ((leds & 0x0000FF00) >> 8));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	b29b      	uxth	r3, r3
 8001222:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffcd 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0200 | ((leds & 0x00FF0000) >> 16));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b29b      	uxth	r3, r3
 8001238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffc2 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0x0100 | ((leds & 0xFF000000) >> 24));	// Most left digit
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	0e1b      	lsrs	r3, r3, #24
 8001248:	b29b      	uxth	r3, r3
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	b29b      	uxth	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ffb9 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0); // NOP - Some clock bug
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ffb6 	bl	80011c8 <max7219_cmd>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <max7219_barGraph>:

void max7219_barGraph(uint8_t leds) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	max7219_cmd(0x0500 | (leds & 0xFF));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b21b      	sxth	r3, r3
 8001272:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001276:	b21b      	sxth	r3, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffa4 	bl	80011c8 <max7219_cmd>
	max7219_cmd(0); // NOP - Some clock bug
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ffa1 	bl	80011c8 <max7219_cmd>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <SystemInit+0x28>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <SystemInit+0x28>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SystemInit+0x28>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012aa:	609a      	str	r2, [r3, #8]
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	2302      	movs	r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	2302      	movs	r3, #2
 80012d4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <SystemCoreClockUpdate+0xe0>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d007      	beq.n	80012f6 <SystemCoreClockUpdate+0x3a>
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d009      	beq.n	80012fe <SystemCoreClockUpdate+0x42>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d13d      	bne.n	800136a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <SystemCoreClockUpdate+0xe8>)
 80012f2:	601a      	str	r2, [r3, #0]
      break;
 80012f4:	e03d      	b.n	8001372 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 80012f8:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <SystemCoreClockUpdate+0xec>)
 80012fa:	601a      	str	r2, [r3, #0]
      break;
 80012fc:	e039      	b.n	8001372 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <SystemCoreClockUpdate+0xe0>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0d9b      	lsrs	r3, r3, #22
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <SystemCoreClockUpdate+0xe0>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001312:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800131a:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <SystemCoreClockUpdate+0xec>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <SystemCoreClockUpdate+0xe0>)
 8001324:	6852      	ldr	r2, [r2, #4]
 8001326:	0992      	lsrs	r2, r2, #6
 8001328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e00b      	b.n	800134c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <SystemCoreClockUpdate+0xe8>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <SystemCoreClockUpdate+0xe0>)
 800133e:	6852      	ldr	r2, [r2, #4]
 8001340:	0992      	lsrs	r2, r2, #6
 8001342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <SystemCoreClockUpdate+0xe0>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	0c1b      	lsrs	r3, r3, #16
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	3301      	adds	r3, #1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 8001366:	6013      	str	r3, [r2, #0]
      break;
 8001368:	e003      	b.n	8001372 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <SystemCoreClockUpdate+0xe8>)
 800136e:	601a      	str	r2, [r3, #0]
      break;
 8001370:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <SystemCoreClockUpdate+0xe0>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <SystemCoreClockUpdate+0xf0>)
 800137e:	5cd3      	ldrb	r3, [r2, r3]
 8001380:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <SystemCoreClockUpdate+0xe4>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40023800 	.word	0x40023800
 80013a0:	20000000 	.word	0x20000000
 80013a4:	00f42400 	.word	0x00f42400
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	08001484 	.word	0x08001484

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013b6:	e003      	b.n	80013c0 <LoopCopyDataInit>

080013b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013be:	3104      	adds	r1, #4

080013c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013c8:	d3f6      	bcc.n	80013b8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013cc:	e002      	b.n	80013d4 <LoopFillZerobss>

080013ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013d0:	f842 3b04 	str.w	r3, [r2], #4

080013d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013d8:	d3f9      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013da:	f7ff ff59 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f000 f811 	bl	8001404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fde1 	bl	8000fa8 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013e8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80013ec:	0800149c 	.word	0x0800149c
  ldr  r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013f4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80013f8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80013fc:	20000054 	.word	0x20000054

08001400 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <BusFault_Handler>
	...

08001404 <__libc_init_array>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4e0d      	ldr	r6, [pc, #52]	; (800143c <__libc_init_array+0x38>)
 8001408:	4c0d      	ldr	r4, [pc, #52]	; (8001440 <__libc_init_array+0x3c>)
 800140a:	1ba4      	subs	r4, r4, r6
 800140c:	10a4      	asrs	r4, r4, #2
 800140e:	2500      	movs	r5, #0
 8001410:	42a5      	cmp	r5, r4
 8001412:	d109      	bne.n	8001428 <__libc_init_array+0x24>
 8001414:	4e0b      	ldr	r6, [pc, #44]	; (8001444 <__libc_init_array+0x40>)
 8001416:	4c0c      	ldr	r4, [pc, #48]	; (8001448 <__libc_init_array+0x44>)
 8001418:	f000 f818 	bl	800144c <_init>
 800141c:	1ba4      	subs	r4, r4, r6
 800141e:	10a4      	asrs	r4, r4, #2
 8001420:	2500      	movs	r5, #0
 8001422:	42a5      	cmp	r5, r4
 8001424:	d105      	bne.n	8001432 <__libc_init_array+0x2e>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800142c:	4798      	blx	r3
 800142e:	3501      	adds	r5, #1
 8001430:	e7ee      	b.n	8001410 <__libc_init_array+0xc>
 8001432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001436:	4798      	blx	r3
 8001438:	3501      	adds	r5, #1
 800143a:	e7f2      	b.n	8001422 <__libc_init_array+0x1e>
 800143c:	08001494 	.word	0x08001494
 8001440:	08001494 	.word	0x08001494
 8001444:	08001494 	.word	0x08001494
 8001448:	08001498 	.word	0x08001498

0800144c <_init>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr

08001458 <_fini>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	bf00      	nop
 800145c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145e:	bc08      	pop	{r3}
 8001460:	469e      	mov	lr, r3
 8001462:	4770      	bx	lr
